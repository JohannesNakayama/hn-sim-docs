{
  "articles": [
    {
      "path": "about.html",
      "title": "About this site",
      "description": "Some additional details about the website",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-05-19T10:33:50+02:00"
    },
    {
      "path": "index.html",
      "title": "My Website",
      "description": "Welcome to the website. I hope you enjoy it!\n",
      "author": [],
      "contents": "\n\n\n\n",
      "last_modified": "2022-05-19T10:33:51+02:00"
    },
    {
      "path": "rank-upvote-causal-model.html",
      "title": "The Causal Effect of Rank on Upvotes on HN",
      "description": "A new article created using the Distill format.\n",
      "author": [
        {
          "name": "Nora Jones",
          "url": "https://example.com/norajones"
        }
      ],
      "date": "`r Sys.Date()`",
      "contents": "\nSummary\nStories on the Hacker News home page get more upvotes. But do they get more upvotes because they are on the home page? Or are they on the home page because they get more upvotes?\nObviously, it is both. The chart below shows the number of upvotes stories receive on average at each rank on HN, and breaks this down into upvotes received because of rank, and upvotes received because of the story that was shown at that rank.\n[ chart ]\nThe Causal Graph\nWe figured this out using an approach influenced by Judea Pearl’s work on Graphical Models, having recently read the textbook [Causal Inference in Statistics].\nWe start with a DAG showing our assumptions about the causal relationships in the data.\n                      story\n                     ↙     ↘\n                  rank  →  upvotes\n\n\n\nThere are obviously other factors effecting each of these three. But we assume that they are mutually independent and are therefore not confounders, so it is convenient to ignore them.\nSimulating an Intervention\nTo isolate the effect or rank on upvotes, we simulate an intervention. We imagine that rank is held constant at some quantity, instead of being determined by the HN ranking algorithm, then we deduce the number of upvotes a story would receive in this simulated model.\nThe post-intervention model looks like this:\n                      story\n                           ↘\n intervention  →  rank  →  upvotes\n\n\n\nSince the arrows pointing from story and rank into upvotes are undisturbed, their combined influence is not changed by the invervention: a given story at a given rank gets the same number of upvotes per second in the simulation. Only the time that each story spends at each rank changes.\nThe Adjustment Formula\nWe can now use very similar reasoning to that used to derive the Backdoor Adjustment Formula (section X in the book), except we are dealing with upvote rates instead of a probabilities.\nThe upvote rate at a rank can be written as a weighted average across all stories that were shown at that rank.\n\\[\nupvoteRate(rank) = \\frac{\\sum_{story}{(upvoteRate(rank, story) \\cdot timeAt(rank, story))}}{totalTime}\n\\]\nupvoteRate(rank) = ( \\sum_story upvoteRate(rank, story) * timeAt(rank,story) ) / totalTime\nThis equation is true by definition: we are just describing the data we have.\nNow to simulate an intervention, we simply change the time each story spends at each rank. If rank is independent of story, then each story should get the same amount of time at each rank. So we simply replace timeAt(rank,story) with the average time a story spends at each rank, which is totalTime/nStories. Borrowing “do” notation to indicate that we are intervening on rank, we have:\n\\[\nupvoteRate(do(rank)) = \\frac{\\sum_{story}(upvoteRate(rank, story) \\cdot \\frac{totalTime}{nStories})}{totalTime} \\\\\n                     = \\frac{\\sum_{story} upvoteRate(rank, story)}{nStories}\n\\]\nupvoteRate(do(rank))    = ( sum_story upvoteRate(rank,story) * totalTime/nStories ) / totalTime\n                          = ( sum_story upvoteRate(rank,story) / nStories )\n[ In other words, for each rank, we just take the average upvote rate across all stories at that rank. Instinctively, taking the average of rates without any sort of weight may seem suspect, but this is because we are intentionally ignoring information in the manipulated formula.]\nMissing Data\nUnfortunately not every story gets displayed at every rank. And we can’t just take the average over the data points that we have, because there is a correlation between a story’s upvote rate and the rank it is actually shown at, so selecting only higher-ranked stories would introduce bias.\nSo we need to fill in gaps of the data an estimate what the upvoteRate would have been for these stories.\nModeling Story Quality\nTo solve this problem, we first need to model the effect of the stories themselves on upvotes.\nWe assume each story has some true quality, which causes the story to get more or less votes than average in the long run. Note we are not using the term “quality” in the sense of “good”. Rather, it is whatever qualities effect a story’s score or people’s propensity to upvote it, including possibly undesirable qualities such as click-baityness.\nThe upvote rate for a story at a rank should on average be the average upvote rate at that rank, times story quality:\n\\[\nupvoteRate(rank, story) \\approx quality(story) \\cdot upvoteRate(rank)\n\\]\n upvoteRate(rank,story) ≈ quality(story) * upvoteRate(rank) \nUpvote Rate Ratios\nThis means that ratio of upvote rates between two ranks, for a given story, should be approximately the same for every story.\n\\[\nupvoteRatio(N, M, story) = \\frac{upvoteRate(N, story)}{upvoteRate(M, story)} \\\\\n                         \\approx \\frac{quality(story) \\cdot upvoteRate(N)}{quality(story) \\cdot upvoteRate(M)} \\\\\n                         \\approx \\frac{upvoteRate(N)}{upvoteRate(M)}\n\\]\nupvoteRatio(N,M,story) = upvoteRate(N,story)/upvoteRate(M,story) \n                       ≈ quality(story)*upvoteRate(N)\n                           / (quality(story)*upvoteRate(M))\n                       ≈ upvoteRate(N)/upvoteRate(M) \nThe geometric mean of this ratio across all stories gives us an approximation of the relative causal effect of rank on upvotes.\n\\[\nlog(upvoteRatio(N, M)) = \\frac{1}{n} \\sum_{stories} log(upvoteRatio(N, M, story))\n\\]\nlog upvoteRatio(N,M) = 1/n \\sum_stories log upvoteRatio(N,M,story) \nFor example, it tells us that stories receive X fewer upvotes/second at rank N because they are rank N and not rank 1.\nProjected Upvote Rate\nWe can now estimate the upvote rate for any story at rank N based on its upvote rate at rank M.\n\\[\nupvoteRate(N, story) \\approx upvoteRate(M, story) \\cdot upvoteRatio(N, M)\n\\]\nupvoteRate(N,story) ≈ upvoteRate(M,story) * upvoteRatio(N,M)\nWhere M is any rank for which we have data. For a more accurate estimate, we can take the average of across all ranks where the story was shown.\n\\[\nupvoteRate(N, story) \\approx \\frac{1}{nRanks(story)} \\sum_{m \\text{ in } ranks(story)} upvoteRate(M, story) \\cdot upvoteRatio(N, M)\n\\]\nupvoteRate(N,story) ≈ 1/nRanks(story)  ∑_m in ranks(story) upvoteRate(M,story) * upvoteRatio(N,M)\nWe now have the information that was missing for formula (X).\n[ A more complex approach is to create a matrix with all upvote ratios for all combination of ranks, and then calculate some sort of average.\nsum_n upvoteRateRatio()\nthe eigenvector of this matrix, divided by the eigenvalue (the number of ranks). This gives us a\n]\nResults\nPlugging (X) into (Y) we have:\n[Comment Johannes: I had difficulty understanding these equations, so I didn’t write them in mathjax yet] $$\n$$\nupvoteRate(do(rank)) \n    = 1/nStories ∑_story \n        1/nRanks(story)  ∑_m in ranks(story) upvoteRate(m,story) * upvoteRatio(rank,m)\n\n    = 1/nStories ∑_story \n        1/nRanks(story) ∑_m in ranks(story) upvoteRate(m,story) * upvoteRatio(1,m) * upvoteRatio(rank,1)\n\n    =  upvoteRatio(rank,1) 1/nStories ∑_story \n        1/nRanks(story)  \n        ∑_{m in ranks(story)} upvoteRate(m,story) * upvoteRatio(1,m)\nThe results are shown in this chart (same as the introduction).\nBy moving higher-quality stories to the top, the HN news ranking algorithm causes X% more votes to be received at rank 1, and X% more votes overall on the site.\nNote that this considers only first-order effects: if HN were to switch to a chronological feed for example, then people’s experience and behavior on the site would probably completely change. But this model gives us a basis for predicting the immediate effect of algorithm changes.\nIn the [next essay], we use this model to create a simulation that reproduces the pattern of upvotes actually received at each rank, and then show how a modified algorithm could increase the overall quality of stories on the home page.\n\n\n\n",
      "last_modified": "2022-05-30T18:44:54+02:00"
    }
  ],
  "collections": []
}
